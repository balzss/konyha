type Tag {
  id: String!
  name: String!
}

type Recipe {
  id: String!
  slug: String!
  name: String!
  description: String
  ingredients: [String!]
  instructions: [String!]
  tags: [Tag!]
}

type UserPreferences {
  theme: String
}

query GetRecipes($where: RecipesWhereInput) {
  recipes(where: $where) {
    id
    name
    slug
    description
    ingredients
    instructions
    tags {
      id
      name
    }
  }
}

query GetTags {
  tags {
    id
    name
  }
}

mutation DeleteRecipe ($recipeSlug: String!) {
  deleteRecipe(slug: $recipeSlug)
}

input RecipesWhereInput {
  slug: String
}

input RecipeUpsertInput {
  authorId: String!
  name: String!
  slug: String!
  description: String
  ingredients: [String!]
  instructions: [String!]
}

mutation UpsertRecipe ($recipeId: String, $recipeData: RecipeUpsertInput!, $tagsConnect: [String!]!, $tagsCreate: [String!]!) {
  upsertRecipe(id: $recipeId, data: $recipeData, tagsConnect: $tagsConnect, tagsCreate: $tagsCreate) {
    id
    slug
  }
}

input UpdateUserPreferencesInput {
  theme: String
}

mutation UpdateUserPreferences ($preferences: UpdateUserPreferencesInput) {
  updateUserPreferences(preferences: $preferences) {
    theme
  }
}

type Query {
  recipes(where: RecipesWhereInput): [Recipe!]!
  tags: [Tag]
}

type Mutation {
  deleteRecipe(slug: String!): Boolean
  upsertRecipe(id: String, data: RecipeUpsertInput!, tagsConnect: [String!]!, tagsCreate: [String!]!): Recipe
  updateUserPreferences(preferences: UpdateUserPreferencesInput): UserPreferences
}
